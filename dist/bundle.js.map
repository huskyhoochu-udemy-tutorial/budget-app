{"version":3,"sources":["webpack:///dist/bundle.js","webpack:///webpack/bootstrap 0b736f248858880fe394","webpack:///./app.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","budgetController","Expense","id","description","value","this","Income","calcPercentage","totalIncome","percentage","Math","round","getPercentage","data","allItems","exp","inc","totals","budget","calculateTotal","type","sum","forEach","cur","addItem","des","val","newItem","ID","length","push","deleteItem","ids","map","current","index","indexOf","splice","calculateBudget","calculatePercentages","getPercentages","getBudget","totalInc","totalExp","UIController","DOMStrings","expenseContainer","incomeContainer","inputButton","inputDescription","inputType","inputValue","budgetLabel","incomeLabel","expensesLabel","percentageLabel","container","getInput","document","querySelector","valueAsNumber","addListItem","obj","html","newHtml","element","replace","insertAdjacentHTML","deleteListItem","selectorID","getElementById","parentNode","removeChild","clearFields","fields","querySelectorAll","Array","slice","displayBudget","textContent","getDOMStrings","budgetCtrl","UICtrl","updateBudget","updatePercentages","percentages","console","log","ctrlAddItem","input","Number","isNaN","ctrlDeleteItem","event","itemID","target","splitID","split","parseInt","setupEventListeners","DOM","addEventListener","keyCode","which","init"],"mappings":"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","file":"./dist/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// 예산 컨트롤러\nvar budgetController = function () {\n  function Expense(id, description, value) {\n    this.id = id;\n    this.description = description;\n    this.value = value;\n  }\n\n  Expense.prototype.calcPercentage = function (totalIncome) {\n    if (totalIncome > 0) {\n      this.percentage = Math.round(this.value / totalIncome * 100);\n    } else {\n      this.percentage = -1;\n    }\n  };\n\n  Expense.prototype.getPercentage = function () {\n    return this.percentage;\n  };\n\n  function Income(id, description, value) {\n    this.id = id;\n    this.description = description;\n    this.value = value;\n  }\n\n  var data = {\n    allItems: {\n      exp: [],\n      inc: []\n    },\n    totals: {\n      exp: 0,\n      inc: 0\n    },\n    budget: 0,\n    percentage: -1\n  };\n\n  var calculateTotal = function calculateTotal(type) {\n    var sum = 0;\n    data.allItems[type].forEach(function (cur) {\n      sum += cur.value;\n    });\n    data.totals[type] = sum;\n  };\n\n  return {\n    addItem: function addItem(type, des, val) {\n      var newItem = void 0;\n      var ID = void 0;\n\n      // 아이디는 배열 마지막 아이템의 아이디 +1 이다\n      if (data.allItems[type].length > 0) {\n        ID = data.allItems[type][data.allItems[type].length - 1].id + 1;\n      } else {\n        ID = 0;\n      }\n\n      // 수입 지출을 구분하는 조건문\n      if (type === 'exp') {\n        newItem = new Expense(ID, des, val);\n      } else if (type === 'inc') {\n        newItem = new Income(ID, des, val);\n      }\n\n      data.allItems[type].push(newItem);\n      return newItem;\n    },\n    deleteItem: function deleteItem(type, id) {\n      // allItems.type array의 요소마다 콜백 함수를 적용해 새로운 array를 반환한다\n      // ids는 allItems.type의 각 요소들의 id 값으로 이루어진 array가 된다\n      var ids = data.allItems[type].map(function (current) {\n        return current.id;\n      });\n\n      // id 값으로 이루어진 array에서 id 값에 해당하는 index를 찾는다\n      var index = ids.indexOf(id);\n\n      // 아이템이 존재하기면 하면 작동하도록 함(index는 0부터 시작되는 양의 정수니까)\n      if (index !== -1) {\n        data.allItems[type].splice(index, 1);\n      }\n    },\n    calculateBudget: function calculateBudget() {\n      //  총 수입 / 지출 계산\n      calculateTotal('exp');\n      calculateTotal('inc');\n\n      //  총 예산 계산: 수입 - 지출\n      data.budget = data.totals.inc - data.totals.exp;\n\n      //  총 수입 대비 지출율 계산\n      if (data.totals.inc > 0) {\n        data.percentage = Math.round(data.totals.exp / data.totals.inc * 100);\n      } else {\n        data.percentage = -1;\n      }\n    },\n    calculatePercentages: function calculatePercentages() {\n      data.allItems.exp.forEach(function (cur) {\n        cur.calcPercentage(data.totals.inc);\n      });\n    },\n    getPercentages: function getPercentages() {\n      return data.allItems.exp.map(function (cur) {\n        return cur.getPercentage();\n      });\n    },\n\n    getBudget: function getBudget() {\n      return {\n        budget: data.budget,\n        totalInc: data.totals.inc,\n        totalExp: data.totals.exp,\n        percentage: data.percentage\n      };\n    }\n  };\n}();\n\n// UI 컨트롤러\nvar UIController = function () {\n  var DOMStrings = {\n    expenseContainer: '.expenses__list',\n    incomeContainer: '.income__list',\n    inputButton: '.add__btn',\n    inputDescription: '.add__description',\n    inputType: '.add__type',\n    inputValue: '.add__value',\n    budgetLabel: '.budget__value',\n    incomeLabel: '.budget__income--value',\n    expensesLabel: '.budget__expenses--value',\n    percentageLabel: '.budget__expenses--percentage',\n    container: '.container'\n  };\n\n  return {\n    // input 값을 DOM 객체로 만드는 함수\n    getInput: function getInput() {\n      return {\n        description: document.querySelector(DOMStrings.inputDescription).value,\n        type: document.querySelector(DOMStrings.inputType).value,\n        value: document.querySelector(DOMStrings.inputValue).valueAsNumber\n      };\n    },\n\n    // DOM 객체를 이용해 HTML 아이템을 만들어 리스트에 띄우는 함수\n    addListItem: function addListItem(obj, type) {\n      var html = void 0;\n      var newHtml = void 0;\n      var element = void 0;\n\n      // placeholder text를 만든다\n      if (type === 'inc') {\n        html = '<div class=\"item clearfix\" id=\"inc-%id%\">' + '<div class=\"item__description\">%description%</div>' + '<div class=\"right clearfix\"><div class=\"item__value\">%value%</div>' + '<div class=\"item__delete\">' + '<button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button>' + '</div></div></div>';\n        element = DOMStrings.incomeContainer;\n      } else if (type === 'exp') {\n        html = '<div class=\"item clearfix\" id=\"exp-%id%\">' + '<div class=\"item__description\">%description%</div>' + '<div class=\"right clearfix\"><div class=\"item__value\">%value%</div>' + '<div class=\"item__percentage\">21%</div><div class=\"item__delete\">' + '<button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button>' + '</div></div></div>';\n        element = DOMStrings.expenseContainer;\n      }\n\n      // placeholder text를 실제 객체로 바꾼다\n      newHtml = html.replace('%id%', obj.id);\n      newHtml = newHtml.replace('%description%', obj.description);\n      newHtml = newHtml.replace('%value%', obj.value);\n\n      // 값을 HTML 위에 띄운다\n      document.querySelector(element).insertAdjacentHTML('beforeend', newHtml);\n    },\n\n    // HTML 아이템을 삭제하는 함수\n    deleteListItem: function deleteListItem(selectorID) {\n      // 삭제하려는 요소의 부모 요소를 지정한다\n      var element = document.getElementById(selectorID);\n      // 부모 요소의 자식 요소를 삭제하는데, 그 인자는 부모 요소가 된다\n      element.parentNode.removeChild(element);\n    },\n\n    // 입력이 끝난 뒤 input fields를 초기화시키는 함수\n    clearFields: function clearFields() {\n      var fields = document.querySelectorAll(DOMStrings.inputDescription + ', ' + DOMStrings.inputValue);\n\n      var fieldsArr = Array.prototype.slice.call(fields);\n\n      fieldsArr.forEach(function (element) {\n        var result = element;\n        result.value = '';\n      });\n    },\n\n    // 총 예산 현황을 HTML 요소에 대입해 띄우는 함수\n    displayBudget: function displayBudget(obj) {\n      document.querySelector(DOMStrings.budgetLabel).textContent = obj.budget;\n      document.querySelector(DOMStrings.incomeLabel).textContent = obj.totalInc;\n      document.querySelector(DOMStrings.expensesLabel).textContent = obj.totalExp;\n\n      if (obj.percentage > 0) {\n        document.querySelector(DOMStrings.percentageLabel).textContent = obj.percentage + '%';\n      } else {\n        document.querySelector(DOMStrings.percentageLabel).textContent = '---';\n      }\n    },\n\n    // DOMStrings object를 호출하는 함수\n    getDOMStrings: function getDOMStrings() {\n      return DOMStrings;\n    }\n  };\n}();\n\n// 글로벌 앱 컨트롤러\nvar controller = function (budgetCtrl, UICtrl) {\n  // 총 예산 업데이트 함수\n  var updateBudget = function updateBudget() {\n    //    1. 예산을 계산하기\n    budgetCtrl.calculateBudget();\n\n    //    2. 예산을 리턴하기\n    var budget = budgetCtrl.getBudget();\n\n    //    3. 예산을 UI에 띄우기\n    UICtrl.displayBudget(budget);\n  };\n\n  // 수입 대비 지출 계산 함수\n  var updatePercentages = function updatePercentages() {\n    //    1. percentage 계산\n    budgetCtrl.calculatePercentages();\n\n    //    2. budget controller에서 percentage 읽기\n    var percentages = budgetCtrl.getPercentages();\n\n    //    3. UI에 업데이트하기\n    console.log(percentages);\n  };\n\n  // HTML 문서에서 필요한 DOM 객체만 가져와 item으로 가공하는 함수\n  var ctrlAddItem = function ctrlAddItem() {\n    //    1. input data를 item에  담기\n    var input = UICtrl.getInput();\n\n    // NaN 값이 들어오는 걸 방지하기 위해 조건문 설정\n    // description 값이 들어와야 하며, value가 isNaN이어서는 안 되며, value는 0보다 커야 한다\n    if (input.description !== '' && !Number.isNaN(input.value) && input.value > 0) {\n      //    2. item을 budget controller에 넘기기\n      var newItem = budgetCtrl.addItem(input.type, input.description, input.value);\n\n      //    3. item을 UI에 추가하기\n      UICtrl.addListItem(newItem, input.type);\n\n      //    4. input 창을 지우기\n      UICtrl.clearFields();\n\n      //    5. 예산을 계산하고 업데이트하기\n      updateBudget();\n\n      //    6. percentage 계산하고 업데이트하기\n      updatePercentages();\n    }\n  };\n\n  // DOM 객체를 삭제하는 함수\n  var ctrlDeleteItem = function ctrlDeleteItem(event) {\n    var itemID = event.target.parentNode.parentNode.parentNode.id;\n    if (itemID) {\n      var splitID = itemID.split('-');\n      var type = splitID[0];\n      var ID = parseInt(splitID[1], 10); // 10진수 정수로 변환\n\n      //  1. item을 자료구조에서 삭제\n      budgetCtrl.deleteItem(type, ID);\n\n      //  2. item을 UI에서 삭제\n      UICtrl.deleteListItem(itemID);\n\n      //  3. 예산을 업데이트하고 새로운 예산을 보여줌\n    }\n  };\n\n  // 이벤트 리스너 함수\n  var setupEventListeners = function setupEventListeners() {\n    // UIController에 정의해 둔 CSS 선택자를 꺼낸다\n    var DOM = UICtrl.getDOMStrings();\n\n    // 이벤트 리스너 1. 체크 버튼을 누를 경우\n    document.querySelector(DOM.inputButton).addEventListener('click', ctrlAddItem);\n\n    // 이벤트 리스너 2. enter 키를 누를 경우\n    document.addEventListener('keypress', function (event) {\n      if (event.keyCode === 13 || event.which === 13) {\n        ctrlAddItem();\n      }\n    });\n\n    // 이벤트 리스너 3. delete 버튼을 누를 경우\n    document.querySelector(DOM.container).addEventListener('click', ctrlDeleteItem);\n  };\n\n  return {\n    init: function init() {\n      UICtrl.displayBudget({\n        budget: 0,\n        totalInc: 0,\n        totalExp: 0,\n        percentage: -1\n      });\n      setupEventListeners();\n    }\n  };\n}(budgetController, UIController);\n\n// 컨트롤러 함수를 초기화\ncontroller.init();\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// dist/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0b736f248858880fe394","// 예산 컨트롤러\nconst budgetController = (() => {\n  function Expense(id, description, value) {\n    this.id = id;\n    this.description = description;\n    this.value = value;\n  }\n\n  Expense.prototype.calcPercentage = function (totalIncome) {\n    if (totalIncome > 0) {\n      this.percentage = Math.round((this.value / totalIncome) * 100);\n    } else {\n      this.percentage = -1;\n    }\n  };\n\n  Expense.prototype.getPercentage = function () {\n    return this.percentage;\n  };\n\n  function Income(id, description, value) {\n    this.id = id;\n    this.description = description;\n    this.value = value;\n  }\n\n  const data = {\n    allItems: {\n      exp: [],\n      inc: [],\n    },\n    totals: {\n      exp: 0,\n      inc: 0,\n    },\n    budget: 0,\n    percentage: -1,\n  };\n\n  const calculateTotal = (type) => {\n    let sum = 0;\n    data.allItems[type].forEach((cur) => {\n      sum += cur.value;\n    });\n    data.totals[type] = sum;\n  };\n\n  return {\n    addItem: (type, des, val) => {\n      let newItem;\n      let ID;\n\n      // 아이디는 배열 마지막 아이템의 아이디 +1 이다\n      if (data.allItems[type].length > 0) {\n        ID = data.allItems[type][data.allItems[type].length - 1].id + 1;\n      } else {\n        ID = 0;\n      }\n\n      // 수입 지출을 구분하는 조건문\n      if (type === 'exp') {\n        newItem = new Expense(ID, des, val);\n      } else if (type === 'inc') {\n        newItem = new Income(ID, des, val);\n      }\n\n      data.allItems[type].push(newItem);\n      return newItem;\n    },\n    deleteItem: (type, id) => {\n      // allItems.type array의 요소마다 콜백 함수를 적용해 새로운 array를 반환한다\n      // ids는 allItems.type의 각 요소들의 id 값으로 이루어진 array가 된다\n      const ids = data.allItems[type].map(current => current.id);\n\n      // id 값으로 이루어진 array에서 id 값에 해당하는 index를 찾는다\n      const index = ids.indexOf(id);\n\n      // 아이템이 존재하기면 하면 작동하도록 함(index는 0부터 시작되는 양의 정수니까)\n      if (index !== -1) {\n        data.allItems[type].splice(index, 1);\n      }\n    },\n    calculateBudget: () => {\n      //  총 수입 / 지출 계산\n      calculateTotal('exp');\n      calculateTotal('inc');\n\n      //  총 예산 계산: 수입 - 지출\n      data.budget = data.totals.inc - data.totals.exp;\n\n      //  총 수입 대비 지출율 계산\n      if (data.totals.inc > 0) {\n        data.percentage = Math.round((data.totals.exp / data.totals.inc) * 100);\n      } else {\n        data.percentage = -1;\n      }\n    },\n    calculatePercentages() {\n      data.allItems.exp.forEach((cur) => {\n        cur.calcPercentage(data.totals.inc);\n      });\n    },\n    getPercentages() {\n      return data.allItems.exp.map(cur => cur.getPercentage());\n    },\n    getBudget: () => ({\n      budget: data.budget,\n      totalInc: data.totals.inc,\n      totalExp: data.totals.exp,\n      percentage: data.percentage,\n    }),\n  };\n})();\n\n// UI 컨트롤러\nconst UIController = (() => {\n  const DOMStrings = {\n    expenseContainer: '.expenses__list',\n    incomeContainer: '.income__list',\n    inputButton: '.add__btn',\n    inputDescription: '.add__description',\n    inputType: '.add__type',\n    inputValue: '.add__value',\n    budgetLabel: '.budget__value',\n    incomeLabel: '.budget__income--value',\n    expensesLabel: '.budget__expenses--value',\n    percentageLabel: '.budget__expenses--percentage',\n    container: '.container',\n  };\n\n  return {\n    // input 값을 DOM 객체로 만드는 함수\n    getInput: () => ({\n      description: document.querySelector(DOMStrings.inputDescription).value,\n      type: document.querySelector(DOMStrings.inputType).value,\n      value: document.querySelector(DOMStrings.inputValue).valueAsNumber,\n    }),\n\n    // DOM 객체를 이용해 HTML 아이템을 만들어 리스트에 띄우는 함수\n    addListItem: (obj, type) => {\n      let html;\n      let newHtml;\n      let element;\n\n      // placeholder text를 만든다\n      if (type === 'inc') {\n        html = '<div class=\"item clearfix\" id=\"inc-%id%\">' +\n          '<div class=\"item__description\">%description%</div>' +\n          '<div class=\"right clearfix\"><div class=\"item__value\">%value%</div>' +\n          '<div class=\"item__delete\">' +\n          '<button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button>' +\n          '</div></div></div>';\n        element = DOMStrings.incomeContainer;\n      } else if (type === 'exp') {\n        html = '<div class=\"item clearfix\" id=\"exp-%id%\">' +\n          '<div class=\"item__description\">%description%</div>' +\n          '<div class=\"right clearfix\"><div class=\"item__value\">%value%</div>' +\n          '<div class=\"item__percentage\">21%</div><div class=\"item__delete\">' +\n          '<button class=\"item__delete--btn\"><i class=\"ion-ios-close-outline\"></i></button>' +\n          '</div></div></div>';\n        element = DOMStrings.expenseContainer;\n      }\n\n      // placeholder text를 실제 객체로 바꾼다\n      newHtml = html.replace('%id%', obj.id);\n      newHtml = newHtml.replace('%description%', obj.description);\n      newHtml = newHtml.replace('%value%', obj.value);\n\n      // 값을 HTML 위에 띄운다\n      document.querySelector(element).insertAdjacentHTML('beforeend', newHtml);\n    },\n\n    // HTML 아이템을 삭제하는 함수\n    deleteListItem: (selectorID) => {\n      // 삭제하려는 요소의 부모 요소를 지정한다\n      const element = document.getElementById(selectorID);\n      // 부모 요소의 자식 요소를 삭제하는데, 그 인자는 부모 요소가 된다\n      element.parentNode.removeChild(element);\n    },\n\n    // 입력이 끝난 뒤 input fields를 초기화시키는 함수\n    clearFields: () => {\n      const fields = document.querySelectorAll(`${DOMStrings.inputDescription}, ${DOMStrings.inputValue}`);\n\n      const fieldsArr = Array.prototype.slice.call(fields);\n\n      fieldsArr.forEach((element) => {\n        const result = element;\n        result.value = '';\n      });\n    },\n\n    // 총 예산 현황을 HTML 요소에 대입해 띄우는 함수\n    displayBudget: (obj) => {\n      document.querySelector(DOMStrings.budgetLabel).textContent = obj.budget;\n      document.querySelector(DOMStrings.incomeLabel).textContent = obj.totalInc;\n      document.querySelector(DOMStrings.expensesLabel).textContent = obj.totalExp;\n\n      if (obj.percentage > 0) {\n        document.querySelector(DOMStrings.percentageLabel).textContent = `${obj.percentage}%`;\n      } else {\n        document.querySelector(DOMStrings.percentageLabel).textContent = '---';\n      }\n    },\n\n    // DOMStrings object를 호출하는 함수\n    getDOMStrings: () => DOMStrings,\n  };\n})();\n\n// 글로벌 앱 컨트롤러\nconst controller = ((budgetCtrl, UICtrl) => {\n  // 총 예산 업데이트 함수\n  const updateBudget = () => {\n    //    1. 예산을 계산하기\n    budgetCtrl.calculateBudget();\n\n    //    2. 예산을 리턴하기\n    const budget = budgetCtrl.getBudget();\n\n    //    3. 예산을 UI에 띄우기\n    UICtrl.displayBudget(budget);\n  };\n\n  // 수입 대비 지출 계산 함수\n  const updatePercentages = () => {\n    //    1. percentage 계산\n    budgetCtrl.calculatePercentages();\n\n    //    2. budget controller에서 percentage 읽기\n    const percentages = budgetCtrl.getPercentages();\n\n    //    3. UI에 업데이트하기\n    console.log(percentages);\n\n  };\n\n  // HTML 문서에서 필요한 DOM 객체만 가져와 item으로 가공하는 함수\n  const ctrlAddItem = () => {\n    //    1. input data를 item에  담기\n    const input = UICtrl.getInput();\n\n    // NaN 값이 들어오는 걸 방지하기 위해 조건문 설정\n    // description 값이 들어와야 하며, value가 isNaN이어서는 안 되며, value는 0보다 커야 한다\n    if (input.description !== '' && !Number.isNaN(input.value) && input.value > 0) {\n      //    2. item을 budget controller에 넘기기\n      const newItem = budgetCtrl.addItem(input.type, input.description, input.value);\n\n      //    3. item을 UI에 추가하기\n      UICtrl.addListItem(newItem, input.type);\n\n      //    4. input 창을 지우기\n      UICtrl.clearFields();\n\n      //    5. 예산을 계산하고 업데이트하기\n      updateBudget();\n\n      //    6. percentage 계산하고 업데이트하기\n      updatePercentages();\n    }\n  };\n\n  // DOM 객체를 삭제하는 함수\n  const ctrlDeleteItem = (event) => {\n    const itemID = event.target.parentNode.parentNode.parentNode.id;\n    if (itemID) {\n      const splitID = itemID.split('-');\n      const type = splitID[0];\n      const ID = parseInt(splitID[1], 10); // 10진수 정수로 변환\n\n      //  1. item을 자료구조에서 삭제\n      budgetCtrl.deleteItem(type, ID);\n\n      //  2. item을 UI에서 삭제\n      UICtrl.deleteListItem(itemID);\n\n      //  3. 예산을 업데이트하고 새로운 예산을 보여줌\n    }\n  };\n\n  // 이벤트 리스너 함수\n  const setupEventListeners = () => {\n    // UIController에 정의해 둔 CSS 선택자를 꺼낸다\n    const DOM = UICtrl.getDOMStrings();\n\n    // 이벤트 리스너 1. 체크 버튼을 누를 경우\n    document.querySelector(DOM.inputButton).addEventListener('click', ctrlAddItem);\n\n    // 이벤트 리스너 2. enter 키를 누를 경우\n    document.addEventListener('keypress', (event) => {\n      if (event.keyCode === 13 || event.which === 13) {\n        ctrlAddItem();\n      }\n    });\n\n    // 이벤트 리스너 3. delete 버튼을 누를 경우\n    document.querySelector(DOM.container).addEventListener('click', ctrlDeleteItem);\n  };\n\n  return {\n    init() {\n      UICtrl.displayBudget({\n        budget: 0,\n        totalInc: 0,\n        totalExp: 0,\n        percentage: -1,\n      });\n      setupEventListeners();\n    },\n  };\n})(budgetController, UIController);\n\n// 컨트롤러 함수를 초기화\ncontroller.init();\n\n\n\n// WEBPACK FOOTER //\n// ./app.js"],"sourceRoot":""}